/**
 * Generated by orval v6.21.0 🍺
 * Do not edit manually.
 * Sample Post API
 * OpenAPI spec version: 1.0.0
 */
import { createInfiniteQuery, createQuery } from "@tanstack/svelte-query";
import type {
  CreateInfiniteQueryOptions,
  CreateInfiniteQueryResult,
  CreateQueryOptions,
  CreateQueryResult,
  QueryFunction,
  QueryKey,
} from "@tanstack/svelte-query";
import type { GetPosts200Item } from "./model";
import { customInstance } from "./custom-fetch";

/**
 * @summary Get a list of posts
 */
export const getPosts = (signal?: AbortSignal) => {
  return customInstance<GetPosts200Item[]>({
    url: `/posts`,
    method: "GET",
    signal,
  });
};

export const getGetPostsQueryKey = () => {
  return [`/posts`] as const;
};

export const getGetPostsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = unknown,
>(options?: {
  query?: CreateInfiniteQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({
    signal,
  }) => getPosts(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    keepPreviousData: true,
    refetchOnWindowFocus: false,
    refetchOnMount: false,
    retry: false,
    ...queryOptions,
  } as CreateInfiniteQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPostsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPosts>>
>;
export type GetPostsInfiniteQueryError = unknown;

/**
 * @summary Get a list of posts
 */
export const createGetPostsInfinite = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = unknown,
>(options?: {
  query?: CreateInfiniteQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  >;
}): CreateInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPostsInfiniteQueryOptions(options);

  const query = createInfiniteQuery(queryOptions) as CreateInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get a list of posts
 */
export const prefetchGetPostsInfinite = async <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: CreateInfiniteQueryOptions<
      Awaited<ReturnType<typeof getPosts>>,
      TError,
      TData
    >;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetPostsInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getGetPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = unknown,
>(options?: {
  query?: CreateQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({
    signal,
  }) => getPosts(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    keepPreviousData: true,
    refetchOnWindowFocus: false,
    refetchOnMount: false,
    retry: false,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPosts>>
>;
export type GetPostsQueryError = unknown;

/**
 * @summary Get a list of posts
 */
export const createGetPosts = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = unknown,
>(options?: {
  query?: CreateQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  >;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPostsQueryOptions(options);

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get a list of posts
 */
export const prefetchGetPosts = async <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof getPosts>>,
      TError,
      TData
    >;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetPostsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
